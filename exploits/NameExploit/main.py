from errors.errors import Errors
import os
import json
from uuid import NAMESPACE_DNS, uuid4
import requests
from colorama import Fore
from succesions.main import Successions
import getpass

req = requests.session()
uid = uuid4()

RED = Fore.RED
RESET = Fore.RESET

class Nameexploit:

    print('''
    ┌─────────────────────────────────────────────────────────────┐
    │              Instagram Line Bypass Exploit                  │
    └─────────────────────────────────────────────────────────────┘
    │    Bypass the line limit on the name value on instagram     │
    └─────────────────────────────────────────────────────────────┘
    
        ''')

    username = input(f"[ USERNAME ] {RED} ➜  {RESET}")
    password = getpass.getpass(f"[ PASSWORD ] {RED} ➜  {RESET}")
    name = '''
.
.
.
.
.
.
.
.
.
.
.
.
.
    '''

    logurl = 'https://i.instagram.com/api/v1/accounts/login/'
 
    headers = {
    'User-Agent': 'Instagram 113.0.0.39.121 Android (24/5.0; 515dpi; 1440x2416; huawei/google; Nexus 6P; angler; angler; en_US)',
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate",
    "Accept-Language": "en-US",
    "X-IG-Capabilities": "3brTvw==",
    "X-IG-Connection-Type": "WIFI",
    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
    'Host': 'i.instagram.com',
    'Connection': 'keep-alive'
    }
    
    url = 'https://i.instagram.com/api/v1/accounts/set_phone_and_name/'

    data = {
        "first_name": name
    }

    @staticmethod
    def c():
        global coo
        r2 = req.post(Nameexploit.url, headers=Nameexploit.headers, data=Nameexploit.data, cookies=coo).status_code
        if r2 == 200:
            print(f"Changed name to :\n",Nameexploit.name)
            input()
        else:
            Errors.namechange_Failed()
    
    logdata = {
    'uuid': uid,
    'password': password,
    'username': username,
    'device_id': uid,
    'from_reg': 'false',
    '_csrftoken': 'missing',
    'login_attempt_countn': '0'
}

    def login():
        global log, loginJS
        global coo
        log = req.post(Nameexploit.logurl, headers=Nameexploit.headers, data=Nameexploit.logdata)
        loginJS = log.json()
        if 'logged_in_user' in log.text:
            Successions.succeed_login()
            coo = log.cookies
            Nameexploit.c()
            pass
            startFramework.userinput()
        else:
            Errors.login_Failed()
            from loader import startFramework
            startFramework.userinput()
Nameexploit.login()